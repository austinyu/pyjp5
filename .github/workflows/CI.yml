# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:

  develop:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        os: [ubuntu-latest, macos-latest, windows-latest]
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          plugins: |
            poetry-dynamic-versioning
      - name: Check Poetry version
        run: |
          poetry --version
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          poetry install --with dev --no-interaction
      #----------------------------------------------
      #       run linters and formatters
      #----------------------------------------------
      - name: Lint code with flake8
        run: |
          poetry run flake8 .
      - name: Lint code with pylint
        run: |
          poetry run pylint src tests --rcfile=.pylintrc
      - name: Type check with mypy
        run: |
          poetry run mypy src tests
      #----------------------------------------------
      #       run test suite & publish coverage
      #----------------------------------------------
      - name: Test with pytest
        run: |
          poetry run pytest
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./tests/.coverage/cov.xml
          flags: pytest
      #----------------------------------------------
      #       Build package & upload artifact
      #----------------------------------------------
      - name: Build package
        run: |
          python -m pip install build
          python -m build
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ runner.os }}-py${{ matrix.python-version }}
          path: dist/*
